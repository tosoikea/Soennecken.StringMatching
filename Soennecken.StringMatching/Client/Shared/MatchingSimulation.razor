@using System.Timers
@using Soennecken.StringMatching.Shared
@using Soennecken.StringMatching.Shared.Algorithms

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
            <p>Eingabewort</p>
            <MatTextField @bind-Value="request.Word" Outlined="true" PlaceHolder="ABABABC" ReadOnly="@isSimulationRunning" OnInput="() => { if (isSimulationStarted) {
                                                                                                                                            isSimulationStarted = false;
                                                                                                                                        } }" />
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
            <p>Muster</p>
            <MatTextField @bind-Value="request.Pattern" Outlined="true" PlaceHolder="ABABC" ReadOnly="@isSimulationRunning" OnInput="() => { if (isSimulationStarted) {
                                                                                                                                            isSimulationStarted = false;
                                                                                                                                        } }" />
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
            <MatButton Type="submit" Raised="true" Disabled="@isSimulationRunning" OnClick="() => { Initialize(); }">Start</MatButton>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
            @if (@isSimulationStarted)
            {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <table>
                    <TableRow>
                        @for (int j = 0; j < Word.Length; j++)
                        {
                            /*
                            We are not interested in
                            a) characters to the left of the current matching alignment
                            b) characters to the right of the end of the pattern
                            c) outstanding matches inside the pattern
                            */
                            @if (j < i || j - i >= Pattern.Length || Matched[j - i] == MatchingStatus.Outstanding)
                            {
                                <td id="w_@j">@Word[j]</td>
                            }
                            else
                            {
                                @if (Matched[j - i] == MatchingStatus.Matched)
                                {
                                    <td id="w_@j" class="matchTop">@Word[j]</td>
                                }
                                else
                                {

                                    <td id="w_@j" class="mismatchTop">@Word[j]</td>
                                }
                            }
                        }
                    </TableRow>
                </table>
                <table id="pattern" style="left:@Offset">
                    <TableRow>
                        @for (int j = 0; j < Pattern.Length; j++)
                        {
                            @if (Matched[j] == MatchingStatus.Matched)
                            {
                                <td id="w_@j" class="matchBottom">@Pattern[j]</td>
                            }
                            else if (Matched[j] == MatchingStatus.Mismatched)
                            {
                                <td id="w_@j" class="mismatchBottom">@Pattern[j]</td>
                            }
                            else
                            {
                                <td id="w_@j">@Pattern[j]</td>
                            }
                        }
                    </TableRow>
                </table>

                @if(arrowI1 < arrowI2){

                    <img style="left:@arrowStart; width: @arrowEnd;" class="in-left"  alt="Pfeil" src="next.png">
                }


            </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IMatcher<char> Matcher { get; set; }

    private IEquatable<char>[] Word { get; set; }
    private IEquatable<char>[] Pattern { get; set; }

    // Contains all matched characters between 0 and k-1
    private enum MatchingStatus
    {
        Outstanding,
        Mismatched,
        Matched
    }

    private static IEquatable<char>[] ConvertFromString(string data)
    {
        var result = new IEquatable<char>[data.Length];

        for (int i = 0; i < data.Length; i++)
            result[i] = data[i];

        return result;
    }

    private MatchingRequest request = new MatchingRequest()
    {
        Word = "ABABABC",
        Pattern = "ABABC"
    };

    private MatchingStatus[] Matched { get; set; }
    private string Offset { get => $"{i * 40}px"; }
    private int i, k;

    private string arrowStart {  get => $"{arrowI1 * 40}px"; }
    private string arrowEnd { get => $"{(arrowI2- arrowI1) * 40}px"; }

    //Arrow
    private int arrowI1, arrowI2;

    private bool isSimulationStarted { get; set; }
    private bool isSimulationRunning { get; set; }
    private Timer timer;

    private void RunStep(Object source, System.Timers.ElapsedEventArgs e)
    {
        StepSummary summary = Matcher.Step();

        if (summary.IsFinished)
        {
            Finish();
            return;
        }

        i = summary.I;
        k = summary.K;
        arrowI1 = arrowI2 = i;
        Matched[summary.K] = (summary.Matched) ? MatchingStatus.Matched : MatchingStatus.Mismatched;

        // Update comparison display
        StateHasChanged();

        if (summary.Shift != null)
            ApplyShift(summary.Shift);
    }

    private async void ApplyShift(Shift shift)
    {
        timer.Stop();
        await Task.Delay(TimeSpan.FromSeconds(1));

        if (shift.IsLeft)
        {
            for (int j = Pattern.Length - 1; j > shift.K; j--)
                Matched[j] = MatchingStatus.Outstanding;
        }
        else
        {
            for (int j = shift.K; j < Pattern.Length; j++)
                Matched[j] = MatchingStatus.Outstanding;
        }

        this.i = shift.I;
        arrowI2 = this.i;
        this.k = shift.K;

        StateHasChanged();
        timer.Start();
    }

    private void Finish()
    {
        timer.Stop();
        isSimulationRunning = false;
        StateHasChanged();
    }

    private void Initialize()
    {
        this.Word = ConvertFromString(request.Word);
        this.Pattern = ConvertFromString(request.Pattern);

        isSimulationStarted = true;
        isSimulationRunning = true;
        i = 0;
        k = 0;
        Matched = new MatchingStatus[this.Pattern.Length];
        Matcher.Init(this.Pattern, this.Word);

        timer = new Timer();
        timer.Interval = 1000;

        timer.Elapsed += RunStep;
        timer.AutoReset = true;

        timer.Start();
    }
}
